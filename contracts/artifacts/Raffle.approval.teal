#pragma version 9

// This TEAL was generated by TEALScript v0.63.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp call_OptIn

NOT_IMPLEMENTED:
	err

// createApplication(uint64,uint64,application)void
abi_route_createApplication:
	// length: uint64
	txna ApplicationArgs 3
	btoi

	// price: uint64
	txna ApplicationArgs 2
	btoi

	// beaconApp: application
	txna ApplicationArgs 1
	btoi
	txnas Applications

	// execute createApplication(uint64,uint64,application)void
	callsub createApplication
	int 1
	return

createApplication:
	proto 3 0

	// contracts/raffle.algo.ts:30
	// this.beaconApp.value = beaconApp
	byte 0x626561636f6e417070 // "beaconApp"
	frame_dig -1 // beaconApp: application
	app_global_put

	// contracts/raffle.algo.ts:31
	// this.price.value = price
	byte 0x7072696365 // "price"
	frame_dig -2 // price: uint64
	app_global_put

	// contracts/raffle.algo.ts:32
	// this.finishRound.value = globals.round + length
	byte 0x66696e697368526f756e64 // "finishRound"
	global Round
	frame_dig -3 // length: uint64
	+
	app_global_put

	// contracts/raffle.algo.ts:34
	// this.numTicketsSold.value = 0
	byte 0x6e756d5469636b657473536f6c64 // "numTicketsSold"
	int 0
	app_global_put
	retsub

// optInToApplication()void
//
// // override to give user a local state
abi_route_optInToApplication:
	// execute optInToApplication()void
	callsub optInToApplication
	int 1
	return

optInToApplication:
	proto 0 0

	// contracts/raffle.algo.ts:39
	// this.numTicketsBought(this.txn.sender).value = 0
	txn Sender
	byte 0x6e756d5469636b657473426f75676874 // "numTicketsBought"
	int 0
	app_local_put
	retsub

getRandomness:
	proto 2 1

	// contracts/raffle.algo.ts:43
	// r: bytes = sendMethodCall<[uint64, bytes], bytes>({
	//       applicationID: this.beaconApp.value,
	//       name: 'must_get',
	//       methodArgs: [round, concat(this.txn.sender, itob(round))],
	//       fee: 0,
	//     })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "must_get(uint64,byte[])byte[]"
	itxn_field ApplicationArgs

	// contracts/raffle.algo.ts:44
	// applicationID: this.beaconApp.value
	byte 0x626561636f6e417070 // "beaconApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/raffle.algo.ts:46
	// methodArgs: [round, concat(this.txn.sender, itob(round))]
	frame_dig -1 // round: uint64
	itob
	itxn_field ApplicationArgs
	txn Sender
	frame_dig -1 // round: uint64
	itob
	concat
	dup
	len
	itob
	extract 6 2
	swap
	concat
	itxn_field ApplicationArgs

	// contracts/raffle.algo.ts:47
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury -2 // r: bytes

	// contracts/raffle.algo.ts:50
	// return r;
	frame_dig -2 // r: bytes
	retsub

getRandomNumberBetween:
	proto 2 1

	// if0_condition
	// contracts/raffle.algo.ts:58
	// min === 1337 && max === 1337
	frame_dig -1 // min: uint64
	int 1337
	==
	dup
	bz skip_and0
	frame_dig -2 // max: uint64
	int 1337
	==
	&&

skip_and0:
	bz if0_end

	// if0_consequent
	// contracts/raffle.algo.ts:59
	// return 1;
	int 1
	retsub

if0_end:
	// contracts/raffle.algo.ts:61
	// return 3;
	int 3
	retsub

// chooseWinner(application)(address,uint64,uint64)
//
// // must reference _beaconApp
abi_route_chooseWinner:
	byte 0x; dupn 2 // push empty bytes to fill the stack frame for this subroutine's local variables

	// _beaconApp: application
	txna ApplicationArgs 1
	btoi
	txnas Applications

	// execute chooseWinner(application)(address,uint64,uint64)
	callsub chooseWinner
	int 1
	return

chooseWinner:
	proto 4 0

	// contracts/raffle.algo.ts:67
	// assert(_beaconApp === this.beaconApp.value)
	frame_dig -1 // _beaconApp: application
	byte 0x626561636f6e417070 // "beaconApp"
	app_global_get
	==
	assert

	// contracts/raffle.algo.ts:69
	// assert(globals.round > this.finishRound.value)
	global Round
	byte 0x66696e697368526f756e64 // "finishRound"
	app_global_get
	>
	assert

	// contracts/raffle.algo.ts:71
	// r = this.getRandomNumberBetween(0, this.numTicketsSold.value - 1)
	byte 0x6e756d5469636b657473536f6c64 // "numTicketsSold"
	app_global_get
	int 1
	-
	int 0
	callsub getRandomNumberBetween
	frame_bury -2 // r: uint64

	// contracts/raffle.algo.ts:72
	// a = this.tickets(r).value
	frame_dig -2 // r: uint64
	itob
	box_get
	assert
	frame_bury -3 // a: address

	// contracts/raffle.algo.ts:74
	// winner: Winner = {
	//       address: a,
	//       ticketNumber: r,
	//       amount: this.price.value * this.numTicketsSold.value,
	//     }
	frame_dig -3 // a: address
	frame_dig -2 // r: uint64
	itob
	concat
	byte 0x7072696365 // "price"
	app_global_get
	byte 0x6e756d5469636b657473536f6c64 // "numTicketsSold"
	app_global_get
	*
	itob
	concat
	frame_bury -4 // winner: Winner

	// contracts/raffle.algo.ts:80
	// this.winner.value = winner
	byte 0x77696e6e6572 // "winner"
	frame_dig -4 // winner: Winner
	app_global_put

	// contracts/raffle.algo.ts:82
	// return winner;
	byte 0x151f7c75
	frame_dig -4 // winner: Winner
	concat
	log
	retsub

// claim()void
//
// // send winner their payment, anyone can call
abi_route_claim:
	// execute claim()void
	callsub claim
	int 1
	return

claim:
	proto 0 0

	// contracts/raffle.algo.ts:87
	// sendPayment({ amount: this.winner.value.amount, receiver: this.winner.value.address })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/raffle.algo.ts:87
	// amount: this.winner.value.amount
	byte 0x77696e6e6572 // "winner"
	app_global_get
	extract 40 8
	btoi
	itxn_field Amount

	// contracts/raffle.algo.ts:87
	// receiver: this.winner.value.address
	byte 0x77696e6e6572 // "winner"
	app_global_get
	extract 0 32
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// buyTicket(pay)uint64
abi_route_buyTicket:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// payTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute buyTicket(pay)uint64
	callsub buyTicket
	int 1
	return

buyTicket:
	proto 2 0

	// contracts/raffle.algo.ts:92
	// assert(globals.round < this.finishRound.value)
	global Round
	byte 0x66696e697368526f756e64 // "finishRound"
	app_global_get
	<
	assert

	// contracts/raffle.algo.ts:94
	// verifyTxn(payTxn, {
	//       receiver: this.app.address,
	//       sender: this.txn.sender,
	//       amount: { greaterThanEqualTo: this.price.value },
	//     })
	// verify receiver
	frame_dig -1 // payTxn: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify sender
	frame_dig -1 // payTxn: pay
	gtxns Sender
	txn Sender
	==
	assert

	// verify amount
	frame_dig -1 // payTxn: pay
	gtxns Amount
	byte 0x7072696365 // "price"
	app_global_get
	>=
	assert

	// contracts/raffle.algo.ts:101
	// numTicketsSold = this.numTicketsSold.value
	byte 0x6e756d5469636b657473536f6c64 // "numTicketsSold"
	app_global_get
	frame_bury -2 // numTicketsSold: uint64

	// contracts/raffle.algo.ts:103
	// assert(!this.tickets(numTicketsSold).exists)
	frame_dig -2 // numTicketsSold: uint64
	itob
	box_len
	swap
	pop
	!
	assert

	// contracts/raffle.algo.ts:106
	// this.tickets(numTicketsSold).value = this.txn.sender
	frame_dig -2 // numTicketsSold: uint64
	itob
	txn Sender
	box_put

	// contracts/raffle.algo.ts:109
	// this.numTicketsBought(this.txn.sender).value = this.numTicketsBought(this.txn.sender).value + 1
	txn Sender
	byte 0x6e756d5469636b657473426f75676874 // "numTicketsBought"
	txn Sender
	byte 0x6e756d5469636b657473426f75676874 // "numTicketsBought"
	app_local_get
	int 1
	+
	app_local_put

	// contracts/raffle.algo.ts:112
	// this.numTicketsSold.value = this.numTicketsSold.value + 1
	byte 0x6e756d5469636b657473536f6c64 // "numTicketsSold"
	byte 0x6e756d5469636b657473536f6c64 // "numTicketsSold"
	app_global_get
	int 1
	+
	app_global_put

	// contracts/raffle.algo.ts:114
	// return numTicketsSold;
	frame_dig -2 // numTicketsSold: uint64
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

create_NoOp:
	method "createApplication(application,uint64,uint64)void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "chooseWinner(application)(address,uint64,uint64)"
	method "claim()void"
	method "buyTicket(pay)uint64"
	txna ApplicationArgs 0
	match abi_route_chooseWinner abi_route_claim abi_route_buyTicket
	err

call_OptIn:
	method "optInToApplication()void"
	txna ApplicationArgs 0
	match abi_route_optInToApplication
	err