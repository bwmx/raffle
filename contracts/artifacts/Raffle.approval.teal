#pragma version 9

// This TEAL was generated by TEALScript v0.63.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp call_OptIn NOT_IMPLEMENTED NOT_IMPLEMENTED call_UpdateApplication

NOT_IMPLEMENTED:
	err

// createApplication(uint64,uint64,application)void
abi_route_createApplication:
	// length: uint64
	txna ApplicationArgs 3
	btoi

	// price: uint64
	txna ApplicationArgs 2
	btoi

	// beaconApp: application
	txna ApplicationArgs 1
	btoi
	txnas Applications

	// execute createApplication(uint64,uint64,application)void
	callsub createApplication
	int 1
	return

createApplication:
	proto 3 0

	// contracts/raffle.algo.ts:33
	// this.beaconApp.value = beaconApp
	byte 0x626561636f6e417070 // "beaconApp"
	frame_dig -1 // beaconApp: application
	app_global_put

	// contracts/raffle.algo.ts:34
	// this.price.value = price
	byte 0x7072696365 // "price"
	frame_dig -2 // price: uint64
	app_global_put

	// contracts/raffle.algo.ts:35
	// this.finishRound.value = globals.round + length
	byte 0x66696e697368526f756e64 // "finishRound"
	global Round
	frame_dig -3 // length: uint64
	+
	app_global_put

	// contracts/raffle.algo.ts:37
	// this.numTicketsSold.value = 0
	byte 0x6e756d5469636b657473536f6c64 // "numTicketsSold"
	int 0
	app_global_put

	// contracts/raffle.algo.ts:39
	// this.status.value = STATUS_CREATED
	byte 0x737461747573 // "status"
	int 0
	app_global_put
	retsub

// optInToApplication()void
//
// // override to give user a local state
abi_route_optInToApplication:
	// execute optInToApplication()void
	callsub optInToApplication
	int 1
	return

optInToApplication:
	proto 0 0

	// contracts/raffle.algo.ts:44
	// this.numTicketsBought(this.txn.sender).value = 0
	txn Sender
	byte 0x6e756d5469636b657473426f75676874 // "numTicketsBought"
	int 0
	app_local_put
	retsub

// updateApplication()void
//
// // we can upgrade the app
abi_route_updateApplication:
	// execute updateApplication()void
	callsub updateApplication
	int 1
	return

updateApplication:
	proto 0 0

	// contracts/raffle.algo.ts:49
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	assert
	==
	assert
	retsub

getRandomness:
	proto 1 1

	// contracts/raffle.algo.ts:61
	// return itob(round);
	frame_dig -1 // round: uint64
	itob
	retsub

getRandomNumberBetween:
	proto 3 1

	// contracts/raffle.algo.ts:65
	// seed = this.getRandomness(this.finishRound.value)
	byte 0x66696e697368526f756e64 // "finishRound"
	app_global_get
	callsub getRandomness
	frame_bury -3 // seed: byte[]

	// contracts/raffle.algo.ts:67
	// return extract_uint64(seed, 0) % (max - min + 1 + min);
	frame_dig -3 // seed: byte[]
	int 0
	extract_uint64
	frame_dig -2 // max: uint64
	frame_dig -1 // min: uint64
	-
	int 1
	+
	frame_dig -1 // min: uint64
	+
	%
	retsub

// chooseWinningTicket(application)uint64
//
// // must reference _beaconApp
abi_route_chooseWinningTicket:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// _beaconApp: application
	txna ApplicationArgs 1
	btoi
	txnas Applications

	// execute chooseWinningTicket(application)uint64
	callsub chooseWinningTicket
	int 1
	return

chooseWinningTicket:
	proto 2 0

	// contracts/raffle.algo.ts:73
	// assert(!this.winningTicket.exists)
	txna Applications 0
	byte 0x77696e6e696e675469636b6574 // "winningTicket"
	app_global_get_ex
	swap
	pop
	!
	assert

	// contracts/raffle.algo.ts:75
	// assert(_beaconApp === this.beaconApp.value)
	frame_dig -1 // _beaconApp: application
	byte 0x626561636f6e417070 // "beaconApp"
	app_global_get
	==
	assert

	// contracts/raffle.algo.ts:77
	// assert(globals.round > this.finishRound.value)
	global Round
	byte 0x66696e697368526f756e64 // "finishRound"
	app_global_get
	>
	assert

	// contracts/raffle.algo.ts:79
	// r = this.getRandomNumberBetween(0, this.numTicketsSold.value - 1)
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables
	byte 0x6e756d5469636b657473536f6c64 // "numTicketsSold"
	app_global_get
	int 1
	-
	int 0
	callsub getRandomNumberBetween
	frame_bury -2 // r: uint64

	// contracts/raffle.algo.ts:81
	// this.winningTicket.value = r
	byte 0x77696e6e696e675469636b6574 // "winningTicket"
	frame_dig -2 // r: uint64
	app_global_put

	// contracts/raffle.algo.ts:83
	// this.status.value = STATUS_PENDING_WINNER
	byte 0x737461747573 // "status"
	int 1
	app_global_put

	// contracts/raffle.algo.ts:84
	// return r;
	frame_dig -2 // r: uint64
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// setWinner()void
abi_route_setWinner:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute setWinner()void
	callsub setWinner
	int 1
	return

setWinner:
	proto 1 0

	// contracts/raffle.algo.ts:89
	// assert(!this.winner.exists)
	txna Applications 0
	byte 0x77696e6e6572 // "winner"
	app_global_get_ex
	swap
	pop
	!
	assert

	// contracts/raffle.algo.ts:91
	// address = this.tickets(this.winningTicket.value).value
	byte 0x77696e6e696e675469636b6574 // "winningTicket"
	app_global_get
	itob
	box_get
	assert
	frame_bury -1 // address: address

	// contracts/raffle.algo.ts:94
	// this.winner.value = address
	byte 0x77696e6e6572 // "winner"
	frame_dig -1 // address: address
	app_global_put

	// contracts/raffle.algo.ts:96
	// this.status.value = STATUS_PENDING_CLAIM
	byte 0x737461747573 // "status"
	int 2
	app_global_put
	retsub

// claim()void
//
// // eslint-disable-next-line no-unused-vars
abi_route_claim:
	// execute claim()void
	callsub claim
	int 1
	return

claim:
	proto 0 0

	// contracts/raffle.algo.ts:103
	// assert(this.status.value === STATUS_PENDING_CLAIM)
	byte 0x737461747573 // "status"
	app_global_get
	int 2
	==
	assert

	// contracts/raffle.algo.ts:105
	// sendPayment({ amount: this.price.value * this.numTicketsSold.value, receiver: this.winner.value })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/raffle.algo.ts:105
	// amount: this.price.value * this.numTicketsSold.value
	byte 0x7072696365 // "price"
	app_global_get
	byte 0x6e756d5469636b657473536f6c64 // "numTicketsSold"
	app_global_get
	*
	itxn_field Amount

	// contracts/raffle.algo.ts:105
	// receiver: this.winner.value
	byte 0x77696e6e6572 // "winner"
	app_global_get
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/raffle.algo.ts:107
	// this.status.value = STATUS_FINISHED
	byte 0x737461747573 // "status"
	int 3
	app_global_put
	retsub

// buyTicket(pay)uint64
abi_route_buyTicket:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// payTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute buyTicket(pay)uint64
	callsub buyTicket
	int 1
	return

buyTicket:
	proto 2 0

	// contracts/raffle.algo.ts:112
	// assert(globals.round < this.finishRound.value)
	global Round
	byte 0x66696e697368526f756e64 // "finishRound"
	app_global_get
	<
	assert

	// contracts/raffle.algo.ts:114
	// verifyTxn(payTxn, {
	//       receiver: this.app.address,
	//       sender: this.txn.sender,
	//       amount: { greaterThanEqualTo: this.price.value },
	//     })
	// verify receiver
	frame_dig -1 // payTxn: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify sender
	frame_dig -1 // payTxn: pay
	gtxns Sender
	txn Sender
	==
	assert

	// verify amount
	frame_dig -1 // payTxn: pay
	gtxns Amount
	byte 0x7072696365 // "price"
	app_global_get
	>=
	assert

	// contracts/raffle.algo.ts:121
	// numTicketsSold = this.numTicketsSold.value
	byte 0x6e756d5469636b657473536f6c64 // "numTicketsSold"
	app_global_get
	frame_bury -2 // numTicketsSold: uint64

	// contracts/raffle.algo.ts:123
	// assert(!this.tickets(numTicketsSold).exists)
	frame_dig -2 // numTicketsSold: uint64
	itob
	box_len
	swap
	pop
	!
	assert

	// contracts/raffle.algo.ts:126
	// this.tickets(numTicketsSold).value = this.txn.sender
	frame_dig -2 // numTicketsSold: uint64
	itob
	txn Sender
	box_put

	// contracts/raffle.algo.ts:129
	// this.numTicketsBought(this.txn.sender).value = this.numTicketsBought(this.txn.sender).value + 1
	txn Sender
	byte 0x6e756d5469636b657473426f75676874 // "numTicketsBought"
	txn Sender
	byte 0x6e756d5469636b657473426f75676874 // "numTicketsBought"
	app_local_get
	int 1
	+
	app_local_put

	// contracts/raffle.algo.ts:132
	// this.numTicketsSold.value = this.numTicketsSold.value + 1
	byte 0x6e756d5469636b657473536f6c64 // "numTicketsSold"
	byte 0x6e756d5469636b657473536f6c64 // "numTicketsSold"
	app_global_get
	int 1
	+
	app_global_put

	// contracts/raffle.algo.ts:134
	// return numTicketsSold;
	frame_dig -2 // numTicketsSold: uint64
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// reclaimBoxFee(uint64)void
abi_route_reclaimBoxFee:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// boxKey: uint64
	txna ApplicationArgs 1
	btoi

	// execute reclaimBoxFee(uint64)void
	callsub reclaimBoxFee
	int 1
	return

reclaimBoxFee:
	proto 2 0

	// contracts/raffle.algo.ts:139
	// assert(this.status.value === STATUS_PENDING_CLAIM || this.status.value === STATUS_FINISHED)
	byte 0x737461747573 // "status"
	app_global_get
	int 2
	==
	dup
	bnz skip_or0
	byte 0x737461747573 // "status"
	app_global_get
	int 3
	==
	||

skip_or0:
	assert

	// contracts/raffle.algo.ts:142
	// who = this.tickets(boxKey).value
	frame_dig -1 // boxKey: uint64
	itob
	box_get
	assert
	frame_bury -2 // who: address

	// contracts/raffle.algo.ts:145
	// sendPayment({ amount: 100_000, receiver: who })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/raffle.algo.ts:145
	// amount: 100_000
	int 100_000
	itxn_field Amount

	// contracts/raffle.algo.ts:145
	// receiver: who
	frame_dig -2 // who: address
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/raffle.algo.ts:147
	// this.tickets(boxKey).delete()
	frame_dig -1 // boxKey: uint64
	itob
	box_del
	retsub

create_NoOp:
	method "createApplication(application,uint64,uint64)void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "chooseWinningTicket(application)uint64"
	method "setWinner()void"
	method "claim()void"
	method "buyTicket(pay)uint64"
	method "reclaimBoxFee(uint64)void"
	txna ApplicationArgs 0
	match abi_route_chooseWinningTicket abi_route_setWinner abi_route_claim abi_route_buyTicket abi_route_reclaimBoxFee
	err

call_OptIn:
	method "optInToApplication()void"
	txna ApplicationArgs 0
	match abi_route_optInToApplication
	err

call_UpdateApplication:
	method "updateApplication()void"
	txna ApplicationArgs 0
	match abi_route_updateApplication
	err